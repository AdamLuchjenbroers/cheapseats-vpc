{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description" : "Core VPC and IAM Infrastructure",
  
  "Parameters" : {
    "AwsCIDRRange" : {
      "Type" : "String",
      "Description" : "CIDR Range for AWS Resources"
    },
    "VpnCIDRRange" : {
      "Type" : "String",
      "Description" : "CIDR Range for Incoming VPN Connectivity"
    },
    "ConfigBucket" : {
       "Type" : "AWS::SSM::Parameter::Value<String>",
       "Description" : "S3 Bucket for Configuration Artifacts & Templates",
       "Default" : "/Deimos/ConfigBucket"
    },
    "VPCName" : {
      "Type" : "String" ,
      "Description" : "Environment Name for VPC and Supporting Infrastructure",
      "Default" : "Deimos"
    }
  },
  
  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "AwsCIDRRange" },
        "EnableDnsSupport" : true,
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "VPCName" } }
        ]       
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },

    "IgwAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Name", "Value" : "PublicRouteTable" },
          { "Key" : "VPN-Accessible", "Value" : "Yes" }
        ]       
      }
    },

    "PublicSubnets" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "SubnetGroupName" : "Public",
          "CidrRange" : { "Fn::Select" : [ 0,  { "Fn::Cidr" : [ { "Ref" : "AwsCIDRRange" }, 2, 14 ] } ] },
          "VpcId" : { "Ref" : "Vpc" },
          "VPCName" : { "Ref" : "VPCName" },
          "MaskSize" : 8,
          "RouteTable" : { "Ref" : "PublicRouteTable" }
        },
        "TemplateURL" : { "Fn::Sub" : "https://${ConfigBucket}.s3.${AWS::Region}.amazonaws.com/Resources/Templates/SubnetGroup.json"},
        "Tags" : [
          { "Key" : "Public", "Value" : "Yes" },          
          { "Key" : "VPN-Accessible", "Value" : "Yes" }
        ]
      }
    },

    "PublicSubnetInternetRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "IgwAttachment",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Name", "Value" : "PrivateRouteTable" },
          { "Key" : "OnDemandNAT", "Value" : "True" },          
          { "Key" : "VPN-Accessible", "Value" : "Yes" }
        ]       
      }
    },

    "PrivateSubnets" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "SubnetGroupName" : "Private",
          "CidrRange" : { "Fn::Select" : [ 1,  { "Fn::Cidr" : [ { "Ref" : "AwsCIDRRange" }, 2, 14 ] } ] },
          "VpcId" : { "Ref" : "Vpc" },
          "VPCName" : { "Ref" : "VPCName" },
          "MaskSize" : 8,
          "RouteTable" : { "Ref" : "PrivateRouteTable" }
        },
        "TemplateURL" : { "Fn::Sub" : "https://${ConfigBucket}.s3.${AWS::Region}.amazonaws.com/Resources/Templates/SubnetGroup.json"},
        "Tags" : [
          { "Key" : "Public", "Value" : "No" }
        ]
      }
    },
    
    "OnDemandNatElasticIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [ 
          { "Key" : "Name", "Value" : "OnDemandNAT-IPAddr" }
        ]
      }
    },
    
    "OnDemandNatLambdaRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "lambda.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/ondemandnat/",
        "ManagedPolicyArns" : [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },

    "OnDemandNatLambdaPolicy" : {
      "DependsOn" : [ "OnDemandNatLambdaRole" ],
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "OnDemandNat-Policy",
        "Roles" : [ { "Ref" : "OnDemandNatLambdaRole" } ],
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "OnDemandNATEC2",
              "Effect": "Allow",
              "Action": [
                "ec2:ReplaceRouteTableAssociation",
                "ec2:DescribeInstances",
                "ec2:DescribeTags",
                "ec2:DescribeAddresses",
                "ec2:CreateNatGateway",
                "ec2:DeleteRoute",
                "ec2:CreateRouteTable",
                "ec2:DescribeNatGateways",
                "ec2:CreateTags",
                "ec2:DescribeVpcAttribute",
                "ec2:ReplaceRoute",
                "ec2:DeleteRouteTable",
                "ec2:CreateRoute",
                "ec2:DeleteNatGateway",
                "ec2:DescribeSubnets",
                "ec2:DescribeRouteTables"
              ],
              "Resource": "*"
            },
            {
              "Action": [
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        }
      }
    },
    
    "OnDemandRequestNatLambda" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
       "FunctionName" : { "Fn::Sub" : "${VPCName}-RequestNATGateway" },
       "Description" : "Request a NAT Gateway (Provisioning one if it isn't already available)",
       "Code" : "Resources/Lambda/OnDemandNAT",
       "Handler" : "RequestGateway.request_gateway_handler",
       "Runtime" : "python3.6",
       "Timeout" : 300,
       "Role"    : { "Fn::GetAtt" : [ "OnDemandNatLambdaRole", "Arn" ] }
       }
    },

    "OnDemandMonitorLambda" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
       "FunctionName" : { "Fn::Sub" : "${VPCName}-CheckGatewayRequired" },
       "Description" : "Checks if an Operational NAT Gateway is still required and terminates if not",
       "Code" : {
         "S3Bucket" : { "Ref" : "ConfigBucket" },
         "S3Key" : "Resources/Lambda/OnDemandNAT.zip"
       },
       "Handler" : "RequestGateway.check_gateway_required",
       "Runtime" : "python3.6",
       "Timeout" : 300,
       "Role"    : { "Fn::GetAtt" : [ "OnDemandNatLambdaRole", "Arn" ] }
       }
    },
    
    "OnDemandMonitorTrigger" : {
      "Type" : "AWS::Events::Rule",
      "Properties" : {
        "Name" : { "Fn::Sub" : "${VPCName}-CheckGatewayTrigger" },
        "Description" : "Twice hourly check to determine if the NAT Gateway is still required",
        "ScheduleExpression" : "rate(30 minutes)",
        "State" : "ENABLED",
        "Targets" : [
          {
            "Arn": { "Fn::GetAtt": ["OnDemandMonitorLambda", "Arn"] },
            "Id": { "Fn::Sub" : "${VPCName}-CheckGatewayRequired" }
          }
        ]
      }
    },
    
    "OnDemandMonitorPermissions" : {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "OnDemandMonitorLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["OnDemandMonitorTrigger", "Arn"] }
      }
    },
    
    "VPNService" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : "PublicSubnets",
      "Properties" : {
        "Parameters" : {
          "VPCName" : { "Ref" : "VPCName" },
          "VpnCIDRRange" : { "Ref" : "VpnCIDRRange" },
          "VpcId" : { "Ref" : "Vpc" }
        },
        "TemplateURL" : { "Fn::Sub" : "https://${ConfigBucket}.s3.${AWS::Region}.amazonaws.com/Resources/DeimosVPN.json" },
        "Tags" : [
          { "Key" : "Application", "Value" : "VPN" }
        ]
      }
    }
  },
  
  "Outputs" : {
    "VpcId" : {
      "Description" : "VPC ID of VPC",
      "Value" : { "Ref" : "Vpc" },
      "Export" : {
        "Name" : { "Fn::Sub" : "${VPCName}-VPCID" }
      }
    }
  }
}
    
